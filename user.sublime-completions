{
   "scope": "source.c, source.cpp, source.c++",
   "completions":[


/* -----------------------------------------------------------------------------------------------------------------------------
* General
* <stdio.h>
*    - List: http://pubs.opengroup.org/onlinepubs/7908799/xsh/stdio.h.html
*    - Desc: http://man7.org/
* <stdlib.h>
*    - List: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdlib.h.html
*    - Desc: http://man7.org/
* <string.h>
*    - List: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdlib.h.html
*    - Desc: http://man7.org/
* <ctype.h>
*    - List: http://www.tutorialpoints.org/
*    - Desc: http://www.tutorialpoints.org/
* ----------------------------------------------------------------------------------------------------------------------------*/
   // <stdio.h>
   { "trigger": "USER remove\tint", "contents": "remove(${1:const char *pathname});"},
   { "trigger": "USER clearerr\tvoid", "contents": "clearerr(${1:FILE *stream});"},
   { "trigger": "USER ctermid\tchar*", "contents": "ctermid(${1:char *s});"},
   { "trigger": "USER fclose\tint", "contents": "fclose(${1:FILE *stream});"},
   { "trigger": "USER fdopen\tFILE*", "contents": "fdopen(${1:int fildes}, ${2:const char *mode});"},
   { "trigger": "USER feof\tint", "contents": "feof(${1:FILE *stream});"},
   { "trigger": "USER ferror\tint", "contents": "ferror(${1:FILE *stream});"},
   { "trigger": "USER fflush\tint", "contents": "fflush(${1:FILE *stream});"},
   { "trigger": "USER fgetc\tint", "contents": "fgetc(${1:FILE *stream});"},
   { "trigger": "USER fgetpos\tint", "contents": "fgetpos(${1:FILE *restrict stream}, ${2:fpos_t *restrict pos});"},
   { "trigger": "USER fgets\tchar*", "contents": "fgets(${1:char *restrict s}, ${2:FILE *restrict stream});"},
   { "trigger": "USER fileno\tint", "contents": "fileno(${1:FILE *stream});"},
   { "trigger": "USER flockfile\tvoid", "contents": "flockfile(${1:FILE *filehandle});"},
   { "trigger": "USER fopen\tFILE*", "contents": "fopen(${1:const char *path}, ${2:const char *mode});"},
   { "trigger": "USER fprintf\tint", "contents": "fprintf(${1:FILE *restrict stream}, ${2:const char *restrict format}, ${3:...});"},
   { "trigger": "USER fputc\tint", "contents": "fputc(${1:int c}, ${2:FILE *stream});"},
   { "trigger": "USER fputs\tint", "contents": "fputs(${1:const char *restrict s}, ${2:FILE *restrict stream});"},
   { "trigger": "USER fread\tsize_t", "contents": "fread(${1:void *ptr}, ${2:size_t size}, ${3:size_t nmemb}, ${4:FILE *stream});"},
   { "trigger": "USER fscanf\tint", "contents": "fscanf(${1:FILE *restrict stream}, ${2:const char *restrict format}, ${3:...});"},
   { "trigger": "USER freopen\tFILE*", "contents": "freopen(${1:const char *restrict pathname}, ${2:const char *restrict mode}, ${3:FILE *restrict stream});"},
   { "trigger": "USER fscanf\tint", "contents": "fscanf(${1:FILE *restrict stream}, ${2:const char *restrict format}, ${3:...});"},
   { "trigger": "USER fseek\tint", "contents": "fseek(${1:FILE *stream}, ${2:long offset}, ${3:int whence});"},
   { "trigger": "USER fseeko\tint", "contents": "fseeko(${1:FILE *stream}, ${2:off_t offset}, ${3:int whence});"},
   { "trigger": "USER fsetpos\tint", "contents": "fsetpos(${1:FILE *stream}, ${2:const fpos_t *pos});"},
   { "trigger": "USER ftell\tlong", "contents": "ftell(${1:FILE *stream});"},
   { "trigger": "USER ftello\toff_t", "contents": "ftello(${1:FILE *stream});"},
   { "trigger": "USER ftrylockfile\tint", "contents": "ftrylockfile(${1:FILE *filehandle});"},
   { "trigger": "USER funlockfile\tvoid", "contents": "funlockfile(${1:FILE *filehandle});"},
   { "trigger": "USER fwrite\tsize_t", "contents": "fwrite(${1:const void *restrict ptr}, ${2:size_t size}, ${3:size_t nitems}, ${4:FILE *restrict stream});"},
   { "trigger": "USER getc\tint", "contents": "getc(${1:FILE *stream});"},
   { "trigger": "USER getchar\tint", "contents": "getchar(${1:void});"},
   { "trigger": "USER getc_unlocked\tint", "contents": "getc_unlocked(${1:FILE *stream});"},
   { "trigger": "USER getchar_unlocked\tint", "contents": "getchar_unlocked(${1:void});"},
   { "trigger": "USER getopt\tint", "contents": "getopt(${1:int argc}, ${2:char * const argv[]}, ${3:const char *optstring});"},
   { "trigger": "USER gets\tchar*", "contents": "gets(${1:char *s});"},
   { "trigger": "USER getw\tint", "contents": "getw(${1:FILE *stream});"},
   { "trigger": "USER pclose\tint", "contents": "pclose(${1:FILE *stream});"},
   { "trigger": "USER perror\tvoid", "contents": "perror(${1:const char *s});"},
   { "trigger": "USER popen\tFILE*", "contents": "popen(${1:const char *command}, ${2:const char *type});"},
   { "trigger": "USER printf\tint", "contents": "printf(${1:const char *format}, ${2:...});"},
   { "trigger": "USER putc\tint", "contents": "putc(${1:int c}, ${2:FILE *stream});"},
   { "trigger": "USER putchar\tint", "contents": "putchar(${1:int c});"},
   { "trigger": "USER putc_unlocked\tint", "contents": "putc_unlocked(${1:int c}, ${2:FILE *stream});"},
   { "trigger": "USER putchar_unlocked\tint", "contents": "putchar_unlocked(${1:int c});"},
   { "trigger": "USER puts\tint", "contents": "puts(${1:const char *s});"},
   { "trigger": "USER putw\tint", "contents": "putw(${1:int w}, ${2:FILE *stream});"},
   { "trigger": "USER remove\tint", "contents": "remove(${1:const char *pathname});"},
   { "trigger": "USER rename\tint", "contents": "rename(${1:const char *oldpath}, ${2:const char *newpath});"},
   { "trigger": "USER rewind\tvoid", "contents": "rewind(${1:FILE *stream});"},
   { "trigger": "USER scanf\tint", "contents": "scanf(${1:const char *format}, ${2:...});"},
   { "trigger": "USER setbuf\tvoid", "contents": "setbuf(${1:FILE *stream}, ${2:char *buf});"},
   { "trigger": "USER setvbuf\tint", "contents": "setvbuf(${1:FILE *restrict stream}, ${2:char *restrict buf}, ${3:int type}, ${4:size_t size});"},
   { "trigger": "USER snprintf\tint", "contents": "snprintf(${1:char *restrict s}, ${2:size_t n}, ${3:const char *restrict format}, ${4:...});"},
   { "trigger": "USER sprintf\tint", "contents": "sprintf(${1:char *restrict s}, ${2:const char *restrict format}, ${3:...});"},
   { "trigger": "USER sscanf\tint", "contents": "sscanf(${1:const char *restrict s}, ${2:const char *restrict format}, ${3:...});"},
   { "trigger": "USER tempnam\tchar*", "contents": "tempnam(${1:const char *dir}, ${2:const char *pfx});"},
   { "trigger": "USER tmpfile\tFILE*", "contents": "tmpfile(${1:void});"},
   { "trigger": "USER tmpnam\tchar*", "contents": "tmpnam(${1:char *s});"},
   { "trigger": "USER ungetc\tint", "contents": "ungetc(${1:int c}, ${2:FILE *stream});"},
   { "trigger": "USER vfprintf\tint", "contents": "vfprintf(${1:FILE *restrict stream}, ${2:const char *restrict format}, ${3:va_list ap});"},
   { "trigger": "USER vprintf\tint", "contents": "vprintf(${1:const char *restrict format}, ${2:va_list ap});"},
   { "trigger": "USER vsnprintf\tint", "contents": "vsnprintf(${1:char *restrict s}, ${2:size_t n}, ${3:const char *restrict format}, ${4:va_list ap});"},
   { "trigger": "USER vsprintf\tint", "contents": "vsprintf(${1:char *restrict s}, ${2:const char *restrict format}, ${3:va_list ap});"},

   // <stdlib.h>
   { "trigger": "USER _exit\tvoid", "contents": "_exit(${1:int status});"},
   { "trigger": "USER a64l\tlong", "contents": "a64l(${1:const char *str64});"},
   { "trigger": "USER abort\tvoid", "contents": "abort(${1:void});"},
   { "trigger": "USER abs\tint", "contents": "abs(${1:nt j});"},
   { "trigger": "USER atexit\tint", "contents": "atexit(${1:void (*function)(void)});"},
   { "trigger": "USER atof\tdouble", "contents": "atof(${1:const char *nptr});"},
   { "trigger": "USER atoi\tint", "contents": "atoi(${1:const char *nptr});"},
   { "trigger": "USER atol\tlong", "contents": "atol(${1:const char *nptr});"},
   { "trigger": "USER atoll\tlong long", "contents": "atoll(${1:const char *nptr});"},
   { "trigger": "USER bsearch\tvoid*", "contents": "bsearch(${1:const void *key}, ${2:const void *base}, ${3:size_t nmemb}, ${4:size_t size}, ${5:int (*compar)(const void *, const void *)});"},
   { "trigger": "USER calloc\tvoid*", "contents": "calloc(${1:size_t nmemb}, ${2:size_t size});"},
   { "trigger": "USER div\tdiv_t", "contents": "div(${1:int numerator}, ${2:int denominator});"},
   { "trigger": "USER drand48\tdouble", "contents": "drand48(${1:void});"},
   { "trigger": "USER ecvt\tchar*", "contents": "ecvt(${1:double number}, ${2:int ndigits}, ${3:int *decpt}, ${4:int *sign});"},
   { "trigger": "USER erand48\tdouble", "contents": "erand48(${1:unsigned short xsubi[3]});"},
   { "trigger": "USER exit\tvoid", "contents": "exit(${1:int status});"},
   { "trigger": "USER fcvt\tchar*", "contents": "fcvt(${1:double number}, ${2:int ndigits}, ${3:int *decpt}, ${4:int *sign});"},
   { "trigger": "USER free\tvoid", "contents": "free(${1:void *ptr});"},
   { "trigger": "USER gcvt\tchar*", "contents": "gcvt(${1:double number}, ${2:int ndigit}, ${3:char *buf});"},
   { "trigger": "USER getenv\tchar*", "contents": "getenv(${1:const char *name});"},
   { "trigger": "USER getsubopt\tint", "contents": "getsubopt(${1:char **optionp}, ${2:char * const *tokens}, ${3:char **valuep});"},
   { "trigger": "USER grantpt\tint", "contents": "grantpt(${1:int fd});"},
   { "trigger": "USER initstate\tchar*", "contents": "initstate(${1:unsigned seed}, ${2:char *state}, ${3:size_t size});"},
   { "trigger": "USER jrand48\tlong", "contents": "jrand48(${1:unsigned short xsubi[3]});"},
   { "trigger": "USER l64a\tchar*", "contents": "l64a(${1:long value});"},
   { "trigger": "USER labs\tlong int", "contents": "labs(${1:long int j});"},
   { "trigger": "USER lcong48\tvoid", "contents": "lcong48(${1:unsigned short param[7]});"},
   { "trigger": "USER ldiv\tldiv_t", "contents": "ldiv(${1:long numer}, ${2:long denom});"},
   { "trigger": "USER llabs\tlong long int", "contents": "llabs(${1:long long int j});"},
   { "trigger": "USER lldiv\tlldiv_t", "contents": "lldiv(${1:long long numer}, ${2:long long denom});"},
   { "trigger": "USER lrand48\tlong int", "contents": "lrand48(${1:void});"},
   { "trigger": "USER malloc\tvoid*", "contents": "malloc(${1:size_t size});"},
   { "trigger": "USER mblen\tint", "contents": "mblen(${1:const char *s}, ${2:size_t n});"},
   { "trigger": "USER mbstowcs\tsize_t", "contents": "mbstowcs(${1:wchar_t *dest}, ${2:const char *src}, ${3:size_t n});"},
   { "trigger": "USER mbtowc\tint", "contents": "mbtowc(${1:wchar_t *pwc}, ${2:const char *s}, ${3:size_t n});"},
   { "trigger": "USER mktemp\tchar*", "contents": "mktemp(${1:char *template});"},
   { "trigger": "USER mkstemp\tint", "contents": "mkstemp(${1:char *template});"},
   { "trigger": "USER mrand48\tlong int", "contents": "mrand48(${1:void});"},
   { "trigger": "USER nrand48\tlong int", "contents": "nrand48(${1:unsigned short xsubi[3]});"},
   { "trigger": "USER posix_memalign\tint", "contents": "posix_memalign(${1:void **memptr}, ${2:size_t alignment}, ${3:size_t size});"},
   { "trigger": "USER posix_openpt\tint", "contents": "posix_openpt(${1:int flags});"},
   { "trigger": "USER ptsname\tchar*", "contents": "ptsname(${1:int fd});"},
   { "trigger": "USER putenv\tint", "contents": "putenv(${1:char *string});"},
   { "trigger": "USER qsort\tvoid", "contents": "qsort(${1:void *base}, ${2:size_t nmemb}, ${3:size_t size}, ${4:int (*compar)(const void *, const void *)});"},
   { "trigger": "USER rand\tint", "contents": "rand(${1:void});"},
   { "trigger": "USER rand_r\tint", "contents": "rand_r(${1:unsigned int *seedp});"},
   { "trigger": "USER random\tlong int", "contents": "random(${1:void});"},
   { "trigger": "USER realloc\tvoid*", "contents": "realloc(${1:void *ptr}, ${2:size_t size});"},
   { "trigger": "USER realpath\tchar*", "contents": "realpath(${1:const char *path}, ${2:char *resolved_path});"},
   { "trigger": "USER seed48\tunsigned short*", "contents": "seed48(${1:unsigned short seed16v[3]});"},
   { "trigger": "USER setenv\tint", "contents": "setenv(${1:const char *name}, ${2:const char *value}, ${3:int overwrite});"},
   { "trigger": "USER setkey\tvoid", "contents": "setkey(${1:const char *key});"},
   { "trigger": "USER setstate\tchar*", "contents": "setstate(${1:char *state});"},
   { "trigger": "USER srand\tvoid", "contents": "srand(${1:unsigned seed});"},
   { "trigger": "USER srand48\tvoid", "contents": "srand48(${1:long seedval});"},
   { "trigger": "USER srandom\tvoid", "contents": "srandom(${1:unsigned seed});"},
   { "trigger": "USER strtod\tdouble", "contents": "strtod(${1:const char *nptr}, ${2:char **endptr});"},
   { "trigger": "USER strtof\tfloat", "contents": "strtof(${1:const char *restrict nptr}, ${2:char **restrict endptr});"},
   { "trigger": "USER strtol\tlong int", "contents": "strtol(${1:const char *nptr}, ${2:char **endptr}, ${3:int base});"},
   { "trigger": "USER strtold\tlong double", "contents": "strtold(${1:const char *restrict nptr}, ${2:char **restrict endptr});"},
   { "trigger": "USER strtoll\tlong long", "contents": "strtoll(${1:const char *restrict str}, ${2:char **restrict endptr}, ${3:int base});"},
   { "trigger": "USER strtoul\tunsigned long int", "contents": "strtoul(${1:const char *nptr}, ${2:char **endptr}, ${3:int base});"},
   { "trigger": "USER strtoull\tunsigned long long int", "contents": "strtoull(${1:const char *nptr}, ${2:char **endptr}, ${3:int base});"},
   { "trigger": "USER system\tint", "contents": "system(${1:const char *command});"},
   { "trigger": "USER unlockpt\tint", "contents": "unlockpt(${1:int fd});"},
   { "trigger": "USER unsetenv\tint", "contents": "unsetenv(${1:const char *name});"},
   { "trigger": "USER wcstombs\tsize_t", "contents": "wcstombs(${1:char *dest}, ${2:const wchar_t *src}, ${3:size_t n});"},
   { "trigger": "USER wctomb\tint", "contents": "wctomb(${1:char *s}, ${2:wchar_t wc});"},

   // <string.h>
   { "trigger": "USER memccpy\tvoid*", "contents": "memccpy(${1:void *dest}, ${2:const void *src}, ${3:int c}, ${4:size_t n});"},
   { "trigger": "USER memchr\tvoid*", "contents": "memchr(${1:const void *s}, ${2:int c}, ${3:size_t n});"},
   { "trigger": "USER memcmp\tint", "contents": "memcmp(${1:const void *s1}, ${2:const void *s2}, ${3:size_t n});"},
   { "trigger": "USER memcpy\tvoid*", "contents": "memcpy(${1:void *dest}, ${2:const void *src}, ${3:size_t n});"},
   { "trigger": "USER memmove\tvoid*", "contents": "memmove(${1:void *dest}, ${2:const void *src}, ${3:size_t n});"},
   { "trigger": "USER memset\tvoid*", "contents": "memset(${1:void *s}, ${2:int c}, ${3:size_t n});"},
   { "trigger": "USER strcat\tchar*", "contents": "strcat(${1:char *dest}, ${2:const char *src});"},
   { "trigger": "USER strchr\tchar*", "contents": "strchr(${1:const char *s}, ${2:int c});"},
   { "trigger": "USER strcmp\tint", "contents": "strcmp(${1:const char *s1}, ${2:const char *s2});"},
   { "trigger": "USER strcoll\tint", "contents": "strcoll(${1:const char *s1}, ${2:const char *s2});"},
   { "trigger": "USER strcpy\tchar*", "contents": "strcpy(${1:char *dest}, ${2:const char *src});"},
   { "trigger": "USER strcspn\tsize_t", "contents": "strcspn(${1:const char *s}, ${2:const char *reject});"},
   { "trigger": "USER strdup\tchar*", "contents": "strdup(${1:const char *s});"},
   { "trigger": "USER strerror\tchar*", "contents": "strerror(${1:int errnum});"},
   { "trigger": "USER strlen\tsize_t", "contents": "strlen(${1:const char *s});"},
   { "trigger": "USER strncat\tchar*", "contents": "strncat(${1:char *dest}, ${2:const char *src}, ${3:size_t n});"},
   { "trigger": "USER strncmp\tint", "contents": "strncmp(${1:const char *s1}, ${2:const char *s2}, ${3:size_t n});"},
   { "trigger": "USER strncpy\tchar*", "contents": "strncpy(${1:char *dest}, ${2:const char *src}, ${3:size_t n});"},
   { "trigger": "USER strpbrk\tchar*", "contents": "strpbrk(${1:const char *s}, ${2:const char *accept});"},
   { "trigger": "USER strrchr\tchar*", "contents": "strrchr(${1:const char *s}, ${2:int c});"},
   { "trigger": "USER strspn\tsize_t", "contents": "strspn(${1:const char *s}, ${2:const char *accept});"},
   { "trigger": "USER strstr\tchar*", "contents": "strstr(${1:const char *haystack}, ${2:const char *needle});"},
   { "trigger": "USER strtok\tchar*", "contents": "strtok(${1:char *str}, ${2:const char *delim});"},
   { "trigger": "USER strtok_r\tchar*", "contents": "strtok_r(${1:char *str}, ${2:const char *delim}, ${3:char **saveptr});"},
   { "trigger": "USER strxfrm\tsize_t", "contents": "strxfrm(${1:char *dest}, ${2:const char *src}, ${3:size_t n});"},

   // <ctype.h>
   { "trigger": "USER isalnum\tint", "contents": "isalnum(${1:int c});"},
   { "trigger": "USER isalpha\tint", "contents": "isalpha(${1:int c});"},
   { "trigger": "USER iscntrl\tint", "contents": "iscntrl(${1:int c});"},
   { "trigger": "USER isdigit\tint", "contents": "isdigit(${1:int c});"},
   { "trigger": "USER isgraph\tint", "contents": "isgraph(${1:int c});"},
   { "trigger": "USER islower\tint", "contents": "islower(${1:int c});"},
   { "trigger": "USER isprint\tint", "contents": "isprint(${1:int c});"},
   { "trigger": "USER ispunct\tint", "contents": "ispunct(${1:int c});"},
   { "trigger": "USER isspace\tint", "contents": "isspace(${1:int c});"},
   { "trigger": "USER isupper\tint", "contents": "isupper(${1:int c});"},
   { "trigger": "USER isxdigit\tint", "contents": "isxdigit(${1:int c});"},
   { "trigger": "USER tolower\tint", "contents": "tolower(${1:int c});"},
   { "trigger": "USER toupper\tint", "contents": "toupper(${1:int c});"},


/* -----------------------------------------------------------------------------------------------------------------------------
* Network
* <unistd.h>
*    - List: http://www.tutorialpoints.org/
*    - Desc: http://www.tutorialpoints.org/
* <socket.h>
*    - List:
*    - Desc: http://www.man7.org/
* <netdb.h>
*    - List:
*    - Desc: http://www.man7.org/
* <fcntl.h>
*    - List:
*    - Desc: http://www.man7.org/
* ----------------------------------------------------------------------------------------------------------------------------*/
   // <unistd.h>
   { "trigger": "USER access\tint", "contents": "access(${1:const char *path}, ${2:int amode});"},
   { "trigger": "USER alarm\tunsigned int", "contents": "alarm(${1:unsigned int seconds});"},
   { "trigger": "USER brk\tint", "contents": "brk(${1:void *addr});"},
   { "trigger": "USER chdir\tint", "contents": "chdir(${1:const char *path});"},
   { "trigger": "USER chroot\tint", "contents": "chroot(${1:const char *path});"},
   { "trigger": "USER chown\tint", "contents": "chown(${1:const char *path}, ${2:uid_t owner}, ${3:gid_t group});"},
   { "trigger": "USER close\tint", "contents": "close(${1:int fildes});"},
   { "trigger": "USER confstr\tsize_t", "contents": "confstr(${1:int name}, ${2:char *buf}, ${3:size_t len});"},
   { "trigger": "USER crypt\tchar*", "contents": "crypt(${1:const char *key}, ${2:const char *salt});"},
   { "trigger": "USER ctermid\tchar*", "contents": "ctermid(${1:char *s});"},
   { "trigger": "USER cuserid\tchar*", "contents": "cuserid(${1:char *s});"},
   { "trigger": "USER dup\tint", "contents": "dup(${1:int fildes});"},
   { "trigger": "USER dup2\tint", "contents": "dup2(${1:int fildes}, ${2:int fildes2});"},
   { "trigger": "USER encrypt\tvoid", "contents": "encrypt(${1:char block[64]}, ${2:int edflag});"},
   { "trigger": "USER execl\tint", "contents": "execl(${1:const char *path}, ${2:const char *arg0}, ${3:...});"},
   { "trigger": "USER execle\tint", "contents": "execle(${1:const char *path}, ${2:const char *arg0}, ${3:...});"},
   { "trigger": "USER execlp\tint", "contents": "execlp(${1:const char *file}, ${2:const char *arg0}, ${3:...});"},
   { "trigger": "USER execv\tint", "contents": "execv(${1:const char *path}, ${2:char *const argv[]});"},
   { "trigger": "USER execve\tint", "contents": "execve(${1:const char *path}, ${2:char *const argv[]}, ${3:char *const envp[]});"},
   { "trigger": "USER execvp\tint", "contents": "execvp(${1:const char *file}, ${2:char *const argv[]});"},
   { "trigger": "USER exit\tvoid", "contents": "exit(${1:int status});"},
   { "trigger": "USER fchown\tint", "contents": "fchown(${1:int fildes}, ${2:uid_t owner}, ${3:gid_t group});"},
   { "trigger": "USER fchdir\tint", "contents": "fchdir(${1:int fildes});"},
   { "trigger": "USER fdatasync\tint", "contents": "fdatasync(${1int fildes});"},
   { "trigger": "USER fork\tpid_t", "contents": "fork();"},
   { "trigger": "USER fpathconf\tlong int", "contents": "fpathconf(${1:int fildes}, ${2:int name});"},
   { "trigger": "USER fsync\tint", "contents": "fsync(${1:int fildes});"},
   { "trigger": "USER ftruncate\tint", "contents": "ftruncate(${1:int fildes}, ${2:off_t length});"},
   { "trigger": "USER getcwd\tchar*", "contents": "getcwd(${1:char *buf}, ${2:size_t size});"},
   { "trigger": "USER getdtablesize\tint", "contents": "getdtablesize();"},
   { "trigger": "USER getegid\tgid_t", "contents": "getegid();"},
   { "trigger": "USER geteuid\tuid_t", "contents": "geteuid();"},
   { "trigger": "USER getgid\tgid_t", "contents": "getgid();"},
   { "trigger": "USER getgroups\tint", "contents": "getgroups(${1:int gidsetsize}, ${2:gid_t grouplist[]});"},
   { "trigger": "USER gethostid\tlong", "contents": "gethostid();"},
   { "trigger": "USER getlogin\tchar*", "contents": "getlogin();"},
   { "trigger": "USER getlogin_r\tint", "contents": "getlogin_r(${1:char *name}, ${2:size_t namesize});"},
   { "trigger": "USER getopt\tint", "contents": "getopt(${1:int argc}, ${2:char * const argv[]}, ${3:const char *optstring});"},
   { "trigger": "USER getpagesize\tint", "contents": "getpagesize();"},
   { "trigger": "USER getpass\tchar*", "contents": "getpass(${1:const char *prompt});"},
   { "trigger": "USER getpgid\tpid_t", "contents": "getpgid(${1:pid_t pid});"},
   { "trigger": "USER getpgrp\tpid_t", "contents": "getpgrp();"},
   { "trigger": "USER getpid\tpid_t", "contents": "getpid();"},
   { "trigger": "USER getppid\tpid_t", "contents": "getppid();"},
   { "trigger": "USER getsid\tpid_t", "contents": "getsid(${1:pid_t pid});"},
   { "trigger": "USER getuid\tuid_t", "contents": "getuid();"},
   { "trigger": "USER getwd\tchar*", "contents": "getwd(${1:char *path_name});"},
   { "trigger": "USER isatty\tint", "contents": "isatty(${1:int fildes});"},
   { "trigger": "USER lchown\tint", "contents": "lchown(${1:const char *path}, ${2:uid_t owner}, ${3:gid_t group});"},
   { "trigger": "USER link\tint", "contents": "link(${1:const char *path1}, ${2:const char *path2});"},
   { "trigger": "USER lockf\tint", "contents": "lockf(${1:int fildes}, ${2:int function}, ${3:off_t size});"},
   { "trigger": "USER nice\tint", "contents": "nice(${1:int incr});"},
   { "trigger": "USER pathconf\tlong int", "contents": "pathconf(${1:const char *path}, ${2:int name});"},
   { "trigger": "USER pause\tint", "contents": "pause();"},
   { "trigger": "USER pipe\tint", "contents": "pipe(${1:int fildes[2]});"},
   { "trigger": "USER pread\tssize_t", "contents": "pread(${1:int fildes}, ${2:void *buf}, ${3:size_t nbyte}, ${4:off_t offset});"},
   { "trigger": "USER pthread_atfork\tint", "contents": "pthread_atfork(${1:void (*prepare)(void)}, ${2:void (*parent)(void)}, ${3:void (*child)(void)});"},
   { "trigger": "USER pwrite\tssize_t", "contents": "pwrite(${1:int fildes}, ${2:const void *buf}, ${3:size_t nbyte}, ${4:off_t offset});"},
   { "trigger": "USER read\tssize_t", "contents": "read(${1:int fildes}, ${2:void *buf}, ${3:size_t nbyte});"},
   { "trigger": "USER readlink\tint", "contents": "readlink(${1:const char *path}, ${2:char *buf}, ${3:size_t bufsize});"},
   { "trigger": "USER rmdir\tint", "contents": "rmdir(${1:const char *path});"},
   { "trigger": "USER sbrk\tvoid*", "contents": "sbrk(${1:gid_t gid});"},
   { "trigger": "USER setgid\tint", "contents": "setgid(${1:gid_t gid});"},
   { "trigger": "USER setpgid\tint", "contents": "setpgid(${1:pid_t pid}, ${2:pid_t pgid});"},
   { "trigger": "USER setregid\tint", "contents": "setregid();"},
   { "trigger": "USER setpgrp\tpid_t", "contents": "setpgrp();"},
   { "trigger": "USER setreuid\tint", "contents": "setreuid(${1:uid_t ruid}, ${2:uid_t euid});"},
   { "trigger": "USER setsid\tpid_t", "contents": "isalnum();"},
   { "trigger": "USER setuid\tint", "contents": "setuid();"},
   { "trigger": "USER sleep\tunsigned int", "contents": "sleep(${1:unsigned int seconds});"},
   { "trigger": "USER swab\tvoid", "contents": "swab(${1:const void *src}, ${2:void *dest}, ${3:ssize_t nbytes});"},
   { "trigger": "USER symlink\tint", "contents": "isalnum(${1:const char *path1}, ${2:const char *path2});"},
   { "trigger": "USER sync\tvoid", "contents": "sync();"},
   { "trigger": "USER sysconf\tlong int", "contents": "sysconf(${1:int name});"},
   { "trigger": "USER tcgetpgrp\tpid_t", "contents": "tcgetpgrp(${1:int fildes});"},
   { "trigger": "USER tcsetpgrp\tint", "contents": "tcsetpgrp(${1:int filde}, ${2:pid_t pgid_id});"},
   { "trigger": "USER truncate\tint", "contents": "truncate(${1:const char *path}, ${2:const char *path});"},
   { "trigger": "USER ttyname\tchar*", "contents": "ttyname(${1:int fildes});"},
   { "trigger": "USER ttyname_r\tint", "contents": "ttyname_r(${1:int fildes}, ${2:char *name}, ${3:size_t namesize});"},
   { "trigger": "USER ualarm\tuseconds_t", "contents": "ualarm(${1:useconds_t useconds}, ${2:useconds_t interval});"},
   { "trigger": "USER unlink\tint", "contents": "unlink(${1:const char *path});"},
   { "trigger": "USER usleep\tint", "contents": "usleep(${1:useconds_t useconds});"},
   { "trigger": "USER vfork\tpid_t", "contents": "vfork();"},
   { "trigger": "USER write\tssize_t", "contents": "write(${1:int fildes}, ${2:const void *buf}, ${3:size_t nbyte});"},

   // <sockets.h>
   { "trigger": "USER accept\tint", "contents": "accept(${1:int sockfd}, (struct sockaddr*)${2:*addr}, ${3:socklen_t *addrlen});"},
   { "trigger": "USER bind\tint", "contents": "bind(${1:int sockfd}, (struct sockaddr *)${2:*addr}, ${3:socklen_t addrlen});"},
   { "trigger": "USER connect\tint", "contents": "connect(${1:int sockfd}, ${2:const struct sockaddr *addr}, ${3:socklen_t addrlen});"},
   { "trigger": "USER getpeername\tint", "contents": "getpeername(${1:int sockfd}, ${2:struct sockaddr *addr}, ${3:socklen_t*addrlen});"},
   { "trigger": "USER getsockname\tint", "contents": "getsockname(${1:int sockfd}, ${2:struct sockaddr *addr}, ${3:socklen_t *addrlen});"},
   { "trigger": "USER getsockopt\tint", "contents": "shutdown(${1:int sockfd}, ${2:int level}, ${3:int optname}, ${4:void *optval}, ${5:socklen_t *optlen});"},
   { "trigger": "USER listen\tint", "contents": "listen(${1:int sockfd}, ${2:int backlog});"},
   { "trigger": "USER recv\tssize_t", "contents": "recv(${1:int sockfd}, ${2:void *buf}, ${3:size_t len}, ${4:int flags});"},
   { "trigger": "USER recvfrom\tssize_t", "contents": "recvfrom(${1:int sockfd}, ${2:void *buf}, ${3:size_t len}, ${4:int flags}, ${5:struct sockaddr *src_addr}, ${6:socklen_t *addrlen});"},
   { "trigger": "USER recvmsg\tssize_t", "contents": "recvmsg(${1:int sockfd}, ${2:struct msghdr *msg}, ${3:int flags});"},
   { "trigger": "USER send\tssize_t", "contents": "send(${1:int sockfd}, ${2:const void *buf}, ${3:size_t len}, ${4:nt flags});"},
   { "trigger": "USER sendmsg\tssize_t", "contents": "sendmsg(${1:iint sockfd}, ${2:const struct msghdr *msg}, ${3:int flags});"},
   { "trigger": "USER sendto\tssize_t", "contents": "sendto(${1:int sockfd}, ${2:const void *buf}, ${3:size_t len}, ${4:int flags}, ${5:const struct sockaddr *dest_addr}, ${6:socklen_t addrlen});"},
   { "trigger": "USER setsockopt\tint", "contents": "setsockopt(${1:int sockfd}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen});"},
   { "trigger": "USER shutdown\tint", "contents": "shutdown(${1:int sockfd}, ${2:int how});"},
   { "trigger": "USER socket\tint", "contents": "socket(${1:int domain}, ${2:int type}, ${3:int protocol});"},
   { "trigger": "USER socketpair\tint", "contents": "socketpair(${1:int domain}, ${2:int type}, ${3:int protocol}, ${4:int sv[2]});"},
      // Types
      { "trigger": "AF_INET\tflag", "contents": "AF_INET"},
      { "trigger": "AF_UNSPEC\tflag", "contents": "AF_UNSPEC"},
      { "trigger": "AF_UNIX\tflag", "contents": "AF_UNIX"},
      { "trigger": "SHUT_RD\tflag", "contents": "SHUT_RD"},
      { "trigger": "SHUT_WR\tflag", "contents": "SHUT_WR"},
      { "trigger": "SHUT_RDWR\tflag", "contents": "SHUT_RDWR"},
      { "trigger": "MSG_CTRUNC\tflag", "contents": "MSG_CTRUNC"},
      { "trigger": "MSG_DONTROUTE\tflag", "contents": "MSG_DONTROUTE"},
      { "trigger": "MSG_EOR\tflag", "contents": "MSG_EOR"},
      { "trigger": "MSG_OOB\tflag", "contents": "MSG_OOB"},
      { "trigger": "MSG_PEEK\tflag", "contents": "MSG_PEEK"},
      { "trigger": "MSG_TRUNC\tflag", "contents": "MSG_TRUNC"},
      { "trigger": "MSG_WAITALL\tflag", "contents": "MSG_WAITALL"},
      { "trigger": "SO_ACCEPTCONN\tflag", "contents": "SO_ACCEPTCONN"},
      { "trigger": "SO_BROADCAST\tflag", "contents": "SO_BROADCAST"},
      { "trigger": "SO_DEBUG\tflag", "contents": "SO_DEBUG"},
      { "trigger": "SO_DONTROUTE\tflag", "contents": "SO_DONTROUTE"},
      { "trigger": "SO_ERROR\tflag", "contents": "SO_ERROR"},
      { "trigger": "SO_KEEPALIVE\tflag", "contents": "SO_KEEPALIVE"},
      { "trigger": "SO_LINGER\tflag", "contents": "SO_LINGER"},
      { "trigger": "SO_OOBINLINE\tflag", "contents": "SO_OOBINLINE"},
      { "trigger": "SO_RCVBUF\tflag", "contents": "SO_RCVBUF"},
      { "trigger": "SO_RCVLOWAT\tflag", "contents": "SO_RCVLOWAT"},
      { "trigger": "SO_RCVTIMEO\tflag", "contents": "SO_RCVTIMEO"},
      { "trigger": "SO_REUSEADDR\tflag", "contents": "SO_REUSEADDR"},
      { "trigger": "SO_SNDBUF\tflag", "contents": "SO_SNDBUF"},
      { "trigger": "SO_SNDLOWAT\tflag", "contents": "SO_SNDLOWAT"},
      { "trigger": "SO_SNDTIMEO\tflag", "contents": "SO_SNDTIMEO"},
      { "trigger": "SO_TYPE\tflag", "contents": "SO_TYPE"},
      { "trigger": "SOL_SOCKET\tflag", "contents": "SOL_SOCKET"},
      { "trigger": "SOCK_DGRAM\tflag", "contents": "SOCK_DGRAM"},
      { "trigger": "SOCK_STREAM\tflag", "contents": "SOCK_STREAM"},
      { "trigger": "SOCK_SEQPACKET\tflag", "contents": "SOCK_SEQPACKET"},

   // <netdb.h>
   { "trigger": "USER endhostent\tvoid", "contents": "endhostent(${1:void});"},
   { "trigger": "USER endnetent\tvoid", "contents": "endnetent(${1:void});"},
   { "trigger": "USER endprotoent\tvoid", "contents": "endprotoent(${1:void});"},
   { "trigger": "USER endservent\tvoid", "contents": "endservent(${1:void});"},
   { "trigger": "USER freeaddrinfo\tvoid", "contents": "freeaddrinfo(${1:void});"},
   { "trigger": "USER gai_strerror\tchar*", "contents": "gai_strerror(${1:int ecode});"},
   { "trigger": "USER getaddrinfo\tint", "contents": "getaddrinfo(${1:const char *node}, ${2:const char *service}, ${3:const struct addrinfo *hints}, ${4:struct addrinfo **res});"},
   { "trigger": "USER gethostbyaddr\tstruct hostent*", "contents": "gethostbyaddr(${1:void *addr}, ${2:socklen_t len}, ${3:int type});"},
   { "trigger": "USER gethostbyname\tstruct hostent*", "contents": "gethostbyname(${1:const char *name});"},
   { "trigger": "USER gethostent\tstruct hostent*", "contents": "gethostent(${1:void});"},
   { "trigger": "USER getnameinfo\tint", "contents": "getnameinfo(${1:struct sockaddr *sa}, ${2:socklen_t salen}, ${3:char *host}, ${4:socklen_t hostlen}, ${5:char *serv}, ${6:socklen_t servlen}, ${7:int flags});"},
   { "trigger": "USER getnetbyaddr\tstruct netent*", "contents": "getnetbyaddr(${1:uint32_t net}, ${2:int type});"},
   { "trigger": "USER getnetbyname\tstruct netent*", "contents": "getnetbyname(${1:const char *name});"},
   { "trigger": "USER getnetent\tstruct netent*", "contents": "getnetent(${1:void});"},
   { "trigger": "USER getprotobyname\tstruct protoent*", "contents": "getprotobyname(${1:const char *name});"},
   { "trigger": "USER getprotobynumber\tstruct protoent*", "contents": "getprotobynumber(${1:int proto});"},
   { "trigger": "USER getprotoent\tstruct protoent*", "contents": "getprotoent(${1:void});"},
   { "trigger": "USER getservbyname\tstruct servent*", "contents": "getservbyname(${1:onst char *name}, ${2:const char *proto});"},
   { "trigger": "USER getservbyport\tstruct servent*", "contents": "getservbyport(${1:int port}, ${2:const char *proto});"},
   { "trigger": "USER getservent\tstruct servent*", "contents": "getservent(${1:void});"},
   { "trigger": "USER sethostent\tvoid", "contents": "sethostent(${1:int stayopen});"},
   { "trigger": "USER setnetent\tvoid", "contents": "setnetent(${1:int stayopen});"},
   { "trigger": "USER setprotoent\tvoid", "contents": "setprotoent(${1:int stayopen});"},
   { "trigger": "USER setservent\tvoid", "contents": "setservent(${1:int stayopen});"},

   // <fcntl.h>
   { "trigger": "USER fcntl\tint", "contents": "fcntl(${1:int fd}, ${2:int cmd}, ${3:struct *flock});"},
   { "trigger": "USER open\tint", "contents": "open(${1:const char *pathname}, ${2:int flags}, ${3:mode_t mode});"},
   { "trigger": "USER creat\tint", "contents": "creat(${1:const char *pathname}, ${2:mode_t mode});"},
   { "trigger": "USER openat\tint", "contents": "openat(${1:int dirfd}, ${2:const char *pathname}, ${3:int flags}, ${4:mode_t mode});"},
      // struct
      { "trigger": "struct flock\tstruct", "contents": "struct flock {\n\tshort l_type; /* Type of lock: F_RDLCK, F_WRLCK, F_UNLCK */\n\tshort l_whence; /* How to interpret l_start: SEEK_SET, SEEK_CUR, SEEK_END */\n\toff_t l_start; /* Starting offset for lock */\n\toff_t l_len; /* Number of bytes to lock */\n\tpid_t l_pid; /* PID of process blocking our lock (set by F_GETLK and F_OFD_GETLK) */\n}"},
      // Flags
      { "trigger": "F_DUPFD\tflag", "contents": "F_DUPFD"},
      { "trigger": "F_DUPFD_CLOEXEC\tflag", "contents": "F_DUPFD_CLOEXEC"},
      { "trigger": "F_GETFD\tflag", "contents": "F_GETFD"},
      { "trigger": "F_SETFD\tfalg", "contents": "F_SETFD"},
      { "trigger": "F_GETFL\tfalg", "contents": "F_GETFL"},
      { "trigger": "F_SETFL\tfalg", "contents": "F_SETFL"},
      { "trigger": "F_GETLK\tfalg", "contents": "F_GETLK"},
      { "trigger": "F_SETLK\tfalg", "contents": "F_SETLK"},
      { "trigger": "F_SETLKW\tflag", "contents": "F_SETLKW"},
      { "trigger": "F_GETOWN\tflag", "contents": "F_GETOWN"},
      { "trigger": "F_SETOWN\tflag", "contents": "F_SETOWN"},
      { "trigger": "FD_CLOEXEC\tflag", "contents": "FD_CLOEXEC"},
      { "trigger": "F_RDLCK\tflag", "contents": "F_RDLCK"},
      { "trigger": "F_UNLCK\tflag", "contents": "F_UNLCK"},
      { "trigger": "O_APPEND\tflag", "contents": "O_APPEND"},
      { "trigger": "O_DSYNC\tflag", "contents": "O_DSYNC"},
      { "trigger": "O_NONBLOCK\tflag", "contents": "O_NONBLOCK"},
      { "trigger": "O_RSYNC\tflag", "contents": "O_RSYNC"},
      { "trigger": "O_SYNC\tflag", "contents": "O_SYNC"},
      { "trigger": "O_ACCMODE\tflag", "contents": "O_ACCMODE"},
      { "trigger": "O_EXEC\tflag", "contents": "O_EXEC"},
      { "trigger": "O_RDONLY\tflag", "contents": "O_RDONLY"},
      { "trigger": "O_RDWR\tflag", "contents": "O_RDWR"},
      { "trigger": "O_SEARCH\tflag", "contents": "O_SEARCH"},
      { "trigger": "O_WRONLY\tflag", "contents": "O_WRONLY"},
      { "trigger": "AT_FDCWD\tflag", "contents": "AT_FDCWD"},
      { "trigger": "AT_EACCESS\tflag", "contents": "AT_EACCESS"},
      { "trigger": "AT_SYMLINK_NOFOLLOW\tflag", "contents": "AT_SYMLINK_NOFOLLOW"},
      { "trigger": "AT_SYMLINK_FOLLOW\tflag", "contents": "AT_SYMLINK_FOLLOW"},
      { "trigger": "AT_REMOVEDIR\tflag", "contents": "AT_REMOVEDIR"},
      { "trigger": "POSIX_FADV_DONTNEED\tflag", "contents": "POSIX_FADV_DONTNEED"},
      { "trigger": "POSIX_FADV_NOREUSE\tflag", "contents": "POSIX_FADV_NOREUSE"},
      { "trigger": "POSIX_FADV_NORMAL\tflag", "contents": "POSIX_FADV_NORMAL"},
      { "trigger": "POSIX_FADV_RANDOM\tflag", "contents": "POSIX_FADV_RANDOM"},
      { "trigger": "POSIX_FADV_SEQUENTIAL\tflag", "contents": "POSIX_FADV_SEQUENTIAL"},
      { "trigger": "POSIX_FADV_WILLNEED\tflag", "contents": "POSIX_FADV_WILLNEED"},
      { "trigger": "F_WRLCK\tflag", "contents": "F_WRLCK"},


/* -----------------------------------------------------------------------------------------------------------------------------
* IPC
* <sys/sem.h>
*    - List:
*    - Desc: http://www.man7.org/
* <sys/shm.h>
*    - List:
*    - Desc: http://www.man7.org/
* <sys/ipc.h>
*    - List:
*    - Desc: http://www.man7.org/
* ----------------------------------------------------------------------------------------------------------------------------*/
   // <sys/sem.h>
   { "trigger": "USER semget\tint", "contents": "semget(${1:key_t key}, ${2:int nsems}, ${3:int semflg});"},
   { "trigger": "USER semop\tint", "contents": "semop(${1:int semid}, ${2:struct sembuf *sops}, ${3:size_t nsops});"},
   { "trigger": "USER semctl\tint", "contents": "semctl(${1:int semid}, ${2:int semnum}, ${3:int cmd});"},
      // Struct
      { "trigger": "struct semun\tstruct", "contents": "struct semun {\n\tint val; /* used for SETVAL only */\n\tstruct semid_ds *buf; /* used for IPC_STAT and IPC_SET */\n\tushort *array; /* used for GETALL and SETALL */\n};"},
      { "trigger": "struct semid_ds\tstruct", "contents": "struct semid_ds {\n\tstruct ipc_perm sem_perm;  /* Ownership and permissions */\n\ttime_t          sem_otime; /* Last semop time */\n\ttime_t          sem_ctime; /* Last change time */\n\tunsigned short  sem_nsems; /* No. of semaphores in set */\n};"},
      { "trigger": "struct sembuf\tstruct", "contents": "struct sembuf{\n\tushort sem_num;\n\tshort sem_op;\n\tshort sem_flg;\n};"},
      // Flags
      { "trigger": "GETVAL\tflag", "contents": "GETVAL"},
      { "trigger": "SETVAL\tflag", "contents": "SETVAL"},
      { "trigger": "GETPID\tflag", "contents": "GETPID"},
      { "trigger": "GETNCNT\tflag", "contents": "GETNCNT"},
      { "trigger": "GETZCNT\tflag", "contents": "GETZCNT"},
      { "trigger": "GETALL\tflag", "contents": "GETALL"},
      { "trigger": "SETALL\tflag", "contents": "SETALL"},
      { "trigger": "IPC_STAT\tflag", "contents": "IPC_STAT"},
      { "trigger": "IPC_SET\tflag", "contents": "IPC_SET"},
      { "trigger": "IPC_CREAT\tflag", "contents": "IPC_CREAT"},
      { "trigger": "IPC_EXCL\tflag", "contents": "IPC_EXCL"},
      { "trigger": "O_ACCMODE\tflag", "contents": "O_ACCMODE"},
      { "trigger": "O_ACCMODE\tflag", "contents": "O_ACCMODE"},
      { "trigger": "O_ACCMODE\tflag", "contents": "O_ACCMODE"},
      { "trigger": "O_ACCMODE\tflag", "contents": "O_ACCMODE"},
      { "trigger": "O_ACCMODE\tflag", "contents": "O_ACCMODE"},
      { "trigger": "O_ACCMODE\tflag", "contents": "O_ACCMODE"},

   // <sys/shm.h>
   { "trigger": "USER shmat\tvoid*", "contents": "shmat(${1:int shmid}, ${2:const void *shmaddr}, ${3:int shmflg});"},
   { "trigger": "USER shmctl\tint", "contents": "shmctl(${1:int shmid}, ${2:int cmd}, ${3:struct shmid_ds *buf});"},
   { "trigger": "USER shmdt\tint", "contents": "shmdt(${1:const void *shmadd});"},
   { "trigger": "USER shmget\tint", "contents": "shmget(${1:key_t key}, ${2:size_t size}, ${3:int shmflg});"},
   { "trigger": "USER shmat\tvoid*", "contents": "shmat(${1:const char * filename});"},
      // Flags
      { "trigger": "shmat SHM_EXEC\tflag", "contents": "SHM_EXEC"},
      { "trigger": "shmat SHM_RDONLY\tflag", "contents": "SHM_RDONLY"},
      { "trigger": "shmat SHM_REMAP\tflag", "contents": "SHM_REMAP"},
      { "trigger": "shmctl IPC_STAT\tflag", "contents": "IPC_STAT"},
      { "trigger": "shmctl IPC_SET\tflag", "contents": "IPC_SET"},
      { "trigger": "shmctl IPC_RMID\tflag", "contents": "IPC_RMID"},
      { "trigger": "shmctl IPC_INFO\tflag", "contents": "IPC_INFO"},
      { "trigger": "shmctl SHM_INFO\tflag", "contents": "SHM_INFO"},
      { "trigger": "shmctl SHM_STAT\tflag", "contents": "SHM_STAT"},
      { "trigger": "shmctl SHM_LOCK\tflag", "contents": "SHM_LOCK"},
      { "trigger": "shmctl SHM_UNLOCK\tflag", "contents": "SHM_UNLOCK"},
      { "trigger": "shmget IPC_CREAT\tflag", "contents": "IPC_CREAT"},
      { "trigger": "shmget IPC_EXCL\tflag", "contents": "IPC_EXCL"},
      { "trigger": "shmget SHM_HUGETLB\tflag", "contents": "SHM_HUGETLB"},
      { "trigger": "shmget SHM_HUGE_2MB\tflag", "contents": "SHM_HUGE_2MB"},
      { "trigger": "shmget SHM_NORESERVE\tflag", "contents": "SHM_NORESERVE"},

   // <sys/ipc.h>
   { "trigger": "USER ftok\tkey_t", "contents": "ftok(${1:const char *pathname}, ${2:int proj_id});"},


/* -----------------------------------------------------------------------------------------------------------------------------
* Thread
* <sys/sem.h>
*    - List:
*    - Desc: http://www.man7.org/
* ----------------------------------------------------------------------------------------------------------------------------*/
   // <pthread.h>
   { "trigger": "USER pthread_attr_destroy\tint", "contents": "pthread_attr_destroy(${1:pthread_attr_t *attr});"},
   { "trigger": "USER pthread_attr_getdetachstate\tint", "contents": "pthread_attr_getdetachstate(${1:const pthread_attr_t *attr}, ${2:int *detachstate});"},
   { "trigger": "USER pthread_attr_getguardsize\tint", "contents": "pthread_attr_getguardsize(${1:const pthread_attr_t *attr}, ${2:size_t *guardsize});"},
   { "trigger": "USER pthread_attr_getinheritsched\tint", "contents": "pthread_attr_getinheritsched(${1:const pthread_attr_t *attr}, ${2:int *inheritsched});"},
   { "trigger": "USER pthread_attr_getschedparam\tint", "contents": "pthread_attr_getschedparam(${1:const pthread_attr_t *attr}, ${2:struct sched_param *param});"},
   { "trigger": "USER pthread_attr_getschedpolicy\tint", "contents": "pthread_attr_getschedpolicy(${1:const pthread_attr_t *attr}, ${2:int *policy});"},
   { "trigger": "USER pthread_attr_getscope\tint", "contents": "pthread_attr_getscope(${1:const pthread_attr_t *attr}, ${2:int *scope});"},
   { "trigger": "USER pthread_attr_getstackaddr\tint", "contents": "pthread_attr_getstackaddr(${1:const pthread_attr_t *attr}, ${2:void **stackaddr});"},
   { "trigger": "USER pthread_attr_getstacksize\tint", "contents": "pthread_attr_getstacksize(${1:const pthread_attr_t *attr}, ${2:size_t *stacksize});"},
   { "trigger": "USER pthread_attr_init\tint", "contents": "pthread_attr_init(${1:pthread_attr_t *attr});"},
   { "trigger": "USER pthread_attr_setdetachstate\tint", "contents": "pthread_attr_setdetachstate(${1:pthread_attr_t *attr}, ${2:int detachstate});"},
   { "trigger": "USER pthread_attr_setguardsize\tint", "contents": "pthread_attr_setguardsize(${1:pthread_attr_t *attr}, ${2:size_t guardsize});"},
   { "trigger": "USER pthread_attr_setinheritsched\tint", "contents": "pthread_attr_setinheritsched(${1:pthread_attr_t *attr}, ${2:int inheritsched});"},
   { "trigger": "USER pthread_attr_setschedparam\tint", "contents": "pthread_attr_setschedparam(${1:pthread_attr_t *attr}, ${2:const struct sched_param *param});"},
   { "trigger": "USER pthread_attr_setschedpolicy\tint", "contents": "pthread_attr_setschedpolicy(${1:pthread_attr_t *attr}, ${2:int policy});"},
   { "trigger": "USER pthread_attr_setscope\tint", "contents": "pthread_attr_setscope(${1:pthread_attr_t *attr}, ${2:int scope});"},
   { "trigger": "USER pthread_attr_setstackaddr\tint", "contents": "pthread_attr_setstackaddr(${1:pthread_attr_t *attr}, ${2:void *stackaddr});"},
   { "trigger": "USER pthread_attr_setstacksize\tint", "contents": "pthread_attr_setstacksize(${1:pthread_attr_t *attr}, ${2:size_t stacksize});"},
   { "trigger": "USER pthread_cancel\tint", "contents": "pthread_cancel(${1:pthread_t thread});"},
   { "trigger": "USER pthread_cleanup_push\tvoid", "contents": "pthread_cleanup_push(${1:void (*routine)(void *)}, ${2:void *arg});"},
   { "trigger": "USER pthread_cleanup_pop\tvoid", "contents": "pthread_cleanup_pop(${1:void (*routine)(void *)}, ${2:void *arg});"},

   /* Opengroup.org - Missing from man7 */
   { "trigger": "USER pthread_cond_broadcast\tint", "contents": "pthread_cond_broadcast(${1:pthread_cond_t *cond});"},
   { "trigger": "USER pthread_cond_init\tint", "contents": "pthread_cond_init(${1:pthread_cond_t *cond}, ${2:const pthread_condattr_t *attr});"},
   { "trigger": "USER pthread_cond_destroy\tint", "contents": "pthread_cond_destroy(${1:pthread_cond_t *cond});"},
   { "trigger": "USER pthread_cond_signal\tint", "contents": "pthread_cond_signal(${1:pthread_cond_t *cond});"},
   { "trigger": "USER pthread_cond_timedwait\tint", "contents": "pthread_cond_timedwait(${1:pthread_cond_t *cond}, ${2:pthread_mutex_t *mutex}, ${3:const struct timespec *abstime);"},
   { "trigger": "USER pthread_cond_wait\tint", "contents": "pthread_cond_wait(${1:pthread_cond_t *cond}, ${2:pthread_mutex_t *mutex});"},
   { "trigger": "USER pthread_condattr_destroy\tint", "contents": "pthread_condattr_destroy(${1:pthread_condattr_t *attr});"},
   { "trigger": "USER pthread_condattr_getpshared\tint", "contents": "pthread_condattr_getpshared(${1:const pthread_condattr_t *attr}, ${2:int *pshared});"},
   { "trigger": "USER pthread_condattr_init\tint", "contents": "pthread_condattr_init(${1:pthread_condattr_t *attr});"},
   { "trigger": "USER pthread_condattr_setpshared\tint", "contents": "pthread_condattr_setpshared(${1:pthread_condattr_t *attr}, ${2:int pshared});"},

   /* man7.org */
   { "trigger": "USER pthread_create\tint", "contents": "pthread_create(${1:pthread_t *thread}, ${2:const pthread_attr_t *attr}, ${3:void *(*start_routine) (void *)}, ${4:void *arg});"},
   { "trigger": "USER pthread_detach\tint", "contents": "pthread_detach(${1:pthread_t thread});"},
   { "trigger": "USER pthread_equal\tint", "contents": "pthread_equal(${1:pthread_t t1}, ${2:pthread_t t2});"},
   { "trigger": "USER pthread_exit\tint", "contents": "pthread_exit(${1:void *retval});"},
   { "trigger": "USER pthread_getconcurrency\tint", "contents": "pthread_getconcurrency(${1:void});"},
   { "trigger": "USER pthread_getschedparam\tint", "contents": "pthread_getschedparam(${1:pthread_t thread}, ${2:int *policy}, ${3:struct sched_param *param});"},
   { "trigger": "USER pthread_getspecific\tint", "contents": "pthread_getspecific(${1:pthread_key_t key});"},
   { "trigger": "USER pthread_join\tint", "contents": "pthread_join(${1:pthread_t thread}, ${2:void **retval});"},

   /* Die.net - Missing from Man7*/
   { "trigger": "USER pthread_key_create\tint", "contents": "pthread_key_create(${1:pthread_key_t * key}, ${2:void (* destructor )(void *)});"},
   { "trigger": "USER pthread_key_delete\tint", "contents": "pthread_key_delete(${1:pthread_key_t key});"},
   { "trigger": "USER pthread_mutex_destroy\tint", "contents": "pthread_mutex_destroy(${1:pthread_mutex_t * mutex});"},
   { "trigger": "USER pthread_mutex_getprioceiling\tint", "contents": "pthread_mutex_getprioceiling(${1:const pthread_mutex_t *restrict mutex}, ${2:int *restrict prioceiling});"},
   { "trigger": "USER pthread_mutex_init\tint", "contents": "pthread_mutex_init(${1:pthread_mutex_t *restrict mutex}, ${2:const pthread_mutexattr_t *restrict attr});"},
   { "trigger": "USER pthread_mutex_lock\tint", "contents": "pthread_mutex_lock(${1:pthread_mutex_t *mutex});"},
   { "trigger": "USER pthread_mutex_setprioceiling\tint", "contents": "pthread_mutex_setprioceiling(${1:pthread_mutex_t *restrict mutex}, ${2:int prioceiling}, {3:int *restrict old_ceiling});"},
   { "trigger": "USER pthread_mutex_trylock\tint", "contents": "pthread_mutex_trylock(${1:pthread_mutex_t *mutex});"},
   { "trigger": "USER pthread_mutex_unlock\tint", "contents": "pthread_mutex_unlock(${1:pthread_mutex_t *mutex});"},
   { "trigger": "USER pthread_mutexattr_destroy\tint", "contents": "pthread_mutexattr_destroy(${1:pthread_mutexattr_t *attr});"},
   { "trigger": "USER pthread_mutexattr_getprioceiling\tint", "contents": "pthread_mutexattr_getprioceiling(${1:const pthread_mutexattr_t *restrict attr}, ${2:int *restrict prioceiling});"},
   { "trigger": "USER pthread_mutexattr_getprotocol\tint", "contents": "pthread_mutexattr_getprotocol(${1:const pthread_mutexattr_t *restrict attr}, ${2:int *restrict protocol});"},
   { "trigger": "USER pthread_mutexattr_getpshared\tint", "contents": "pthread_mutexattr_getpshared(${1:const pthread_mutexattr_t *restrict attr}, ${2:int *restrict pshared});"},
   { "trigger": "USER pthread_mutexattr_gettype\tint", "contents": "pthread_mutexattr_gettype(${1:const pthread_mutexattr_t *restrict attr}, ${2:int *restrict type});"},
   { "trigger": "USER pthread_mutexattr_init\tint", "contents": "pthread_mutexattr_init(${1:pthread_mutexattr_t *attr});"},
   { "trigger": "USER pthread_mutexattr_setprioceiling\tint", "contents": "pthread_mutexattr_setprioceiling(${1:pthread_mutexattr_t *attr}, ${2:int prioceiling});"},
   { "trigger": "USER pthread_mutexattr_setprotocol\tint", "contents": "pthread_mutexattr_setprotocol(${1:pthread_mutexattr_t *attr}, ${2:int protocol});"},
   { "trigger": "USER pthread_mutexattr_setpshared\tint", "contents": "pthread_mutexattr_setpshared(${1:pthread_mutexattr_t *attr}, ${2:int pshared});"},
   { "trigger": "USER pthread_mutexattr_settype\tint", "contents": "pthread_mutexattr_settype(${1:pthread_mutexattr_t *attr}, ${2:int type});"},
   { "trigger": "USER pthread_once\tint", "contents": "pthread_once(${1:pthread_once_t *once_control}, ${2:void (*init_routine)(void)});"},
   { "trigger": "USER pthread_rwlock_destroy\tint", "contents": "pthread_rwlock_destroy(${1:pthread_rwlock_t *rwlock});"},
   { "trigger": "USER pthread_rwlock_init\tint", "contents": "pthread_rwlock_init(${1:pthread_rwlock_t *restrict rwlock}, ${2:const pthread_rwlockattr_t *restrict attr});"},
   { "trigger": "USER pthread_rwlock_rdlock\tint", "contents": "pthread_rwlock_rdlock(${1:pthread_rwlock_t *rwlock});"},
   { "trigger": "USER pthread_rwlock_tryrdlock\tint", "contents": "pthread_rwlock_tryrdlock(${1:pthread_rwlock_t *rwlock});"},
   { "trigger": "USER pthread_rwlock_trywrlock\tint", "contents": "pthread_rwlock_trywrlock(${1:pthread_rwlock_t *rwlock});"},
   { "trigger": "USER pthread_rwlock_unlock\tint", "contents": "pthread_rwlock_unlock(${1:pthread_rwlock_t *rwlock});"},
   { "trigger": "USER pthread_rwlock_wrlock\tint", "contents": "pthread_rwlock_wrlock(${1:pthread_rwlock_t *rwlock});"},
   { "trigger": "USER pthread_rwlockattr_destroy\tint", "contents": "pthread_rwlockattr_destroy(${1:pthread_rwlockattr_t *attr});"},
   { "trigger": "USER pthread_rwlockattr_getpshared\tint", "contents": "pthread_rwlockattr_getpshared(${1:const pthread_rwlockattr_t *restrict attr}, ${2:int *restrict pshared});"},
   { "trigger": "USER pthread_rwlockattr_init\tint", "contents": "pthread_rwlockattr_init(${1:pthread_rwlockattr_t *attr});"},
   { "trigger": "USER pthread_rwlockattr_setpshared\tint", "contents": "pthread_rwlockattr_setpshared(${1:pthread_rwlockattr_t *attr}, ${2:int pshared});"},

   /* Man7.org */
   { "trigger": "USER pthread_self\tpthread_t", "contents": "pthread_self(${1:void});"},
   { "trigger": "USER pthread_setcancelstate\tint", "contents": "pthread_setcancelstate(${1:int state}, ${2:int *oldstate});"},
   { "trigger": "USER pthread_setcanceltype\tint", "contents": "pthread_setcanceltype(${1:int type}, ${2:int *oldtype});"},
   { "trigger": "USER pthread_setconcurrency\tint", "contents": "pthread_setconcurrency(${1:int new_level});"},
   { "trigger": "USER pthread_setschedparam\tint", "contents": "pthread_setschedparam(${1:pthread_t thread}, ${2:int policy}, ${3:const struct sched_param *param});"},
   { "trigger": "USER pthread_testcancel\tvoid", "contents": "pthread_testcancel(${1:void});"},
   { "trigger": "USER pthread_setspecific\tint", "contents": "pthread_setspecific(${1:pthread_key_t key}, ${2:const void *value});"},
   { "trigger": "USER pthread_cond_broadcast\tint", "contents": "pthread_cond_broadcast(${1:});"},



   ]// End completions
}


