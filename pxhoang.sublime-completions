{
	"scope": "source.c",
	"completions":[


	/**
	 * General function 
	 */
		{ "trigger": "while\tpxhoang-while", "contents": "while(${1}){\n\t${2}\n};"}, // while 
		{ "trigger": "case\tpxhoang-case", "contents": "switch(${1:expression}) {\n\tcase ${2:1} : \n\t\t${3}\n\t\tbreak;\n\tdefault : \n\t\t${4}\n}"}, // switch case 
		{ "trigger": "if\tpxhoang-if", "contents": "if(${1:condiction}){\n\t${2}\n};"},
		{ "trigger": "for\tpxhoang-for", "contents": "for(${1:i} = 0; ${1:i} < ${2:count}; ${1:i}++){\n\t${3:/* code */}\n};"},

	/**
	 * Stdio.h
	 */
	 	{ "trigger": "fclose\tpxhoang-int fclose", "contents": "fclose(${1:FILE *stream});"},
	 	{ "trigger": "clearerr\tpxhoang-void clearerr", "contents": "clearerr(${1:FILE *stream});"},
	 	{ "trigger": "feof\tpxhoang-int feof", "contents": "feof(${1:FILE *stream});"},
	 	{ "trigger": "ferror\tpxhoang-int ferror", "contents": "ferror(${1:FILE *stream});"},
	 	{ "trigger": "fflush\tpxhoang-int fflush", "contents": "fflush(${1:FILE *stream});"},
	 	{ "trigger": "fgetpos\tpxhoang-int fgetpos", "contents": "fgetpos(${1:FILE *stream}, ${2:fpos_t *pos});"},
	 	{ "trigger": "fopen\tpxhoang-FILE *fopen", "contents": "fopen(${1:const char *filename}, ${2:const char *mode});"},
	 	{ "trigger": "fread\tpxhoang-size_t fread", "contents": "fread(${1:void *ptr}, ${2:size_t size}, ${3:size_t nmemb}, ${4:FILE *stream});"},
	 	{ "trigger": "freopen\tpxhoang-FILE *freopen", "contents": "freopen(${1:const char *filename}, ${2:const char *mode}, ${3:FILE *stream});"},
	 	{ "trigger": "fseek\tpxhoang-int fseek", "contents": "fseek(${1:FILE *stream}, ${2:long int offset}, ${3:int whence});"},
	 	{ "trigger": "fsetpos\tpxhoang-int fsetpos", "contents": "fsetpos(${1:FILE *stream}, ${2:const fpos_t *pos});"},
	 	{ "trigger": "ftell\tpxhoang-long int ftel", "contents": "ftell(${1:FILE *stream});"},
	 	{ "trigger": "fwrite\tpxhoang-size_t fwrite", "contents": "fwrite(${1:const void *ptr}, ${2:size_t size}, ${3:size_t nmemb}, ${4:FILE *stream});"},
	 	{ "trigger": "remove\tpxhoang-int remove", "contents": "remove(${1:const char *filename});"},
	 	{ "trigger": "rename\tpxhoang-int rename", "contents": "rename(${1:const char *old_filename}, ${2:const char *new_filename});"},
	 	{ "trigger": "rewind\tpxhoang-void rewind", "contents": "rewind(${1:FILE *stream});"},
	 	{ "trigger": "setbuf\tpxhoang-void setbuf", "contents": "setbuf(${1:FILE *stream}, ${2:char *buffer});"},
	 	{ "trigger": "setvbuf\tpxhoang-int setvbuf", "contents": "setvbuf(${1:FILE *stream}, ${2:char *buffer}, ${3:int mode}, ${4:size_t size});"},
	 	{ "trigger": "tmpfile\tpxhoang-FILE *tmpfile", "contents": "tmpfile(${1:void});"},
	 	{ "trigger": "tmpnam\tpxhoang-char *tmpnam", "contents": "tmpnam(${1:char *str});"},
	 	{ "trigger": "fprintf\tpxhoang-int fprint", "contents": "fprintf(${1:FILE *stream}, ${2:const char *format});"},
	 	{ "trigger": "printf\tpxhoang-int printf", "contents": "printf(${1:const char *format}, ${2});"},
	 	{ "trigger": "sprintf\tpxhoang-int sprintf", "contents": "sprintf(${1:char *str}, ${2:const char *format}, ${3:flag});"},
	 	{ "trigger": "vfprintf\tpxhoang-int vfprintf", "contents": "vfprintf(${1:FILE *stream}, ${2:const char *format}, ${3:va_list arg});"},
	 	{ "trigger": "vprintf\tpxhoang-int vprintf", "contents": "vprintf(${1:const char *format}, ${2:va_list arg});"},
	 	{ "trigger": "vsprintf\tpxhoang-int vsprintf", "contents": "vsprintf(${1:char *str}, ${2:const char *format}, ${3:va_list arg});"},
	 	{ "trigger": "fscanf\tpxhoang-int fscanf", "contents": "fscanf(${1:FILE *stream}, ${2:const char *format}, ${3});"},
	 	{ "trigger": "scanf\tpxhoang-int scanf", "contents": "scanf(${1:const char *format}, ${2:});"},
	 	{ "trigger": "sscanf\tpxhoang-int sscanf", "contents": "sscanf(${1:const char *str}, ${2:const char *format}), ${3});"},
	 	{ "trigger": "fgetc\tpxhoang-int fgetc", "contents": "fgetc(${1:FILE *stream});"},
	 	{ "trigger": "fgets\tpxhoang-char *fgets", "contents": "fgets(${1:char *str}, ${2:int n}, ${3:FILE *stream});"},
	 	{ "trigger": "fputc\tpxhoang-int fputc", "contents": "fputc(${1:int char}, ${2:FILE *stream});"},
	 	{ "trigger": "fputs\tpxhoang-int fputs", "contents": "fputs(${1:const char *str}, ${2:FILE *stream});"},
	 	{ "trigger": "getc\tpxhoang-int getc", "contents": "getc(${1:FILE *stream});"},
	 	{ "trigger": "getchar\tpxhoang-int getchar", "contents": "getchar(${1:void});"},
	 	{ "trigger": "gets\tpxhoang-char *gets", "contents": "gets(${1:char *str});"},
	 	{ "trigger": "putc\tpxhoang-int putc", "contents": "putc(${1:int char}, ${2:FILE *stream});"},
	 	{ "trigger": "putchar\tpxhoang-int putchar", "contents": "putchar(${1:int char});"},
	 	{ "trigger": "puts\tpxhoang-int puts", "contents": "puts(${1:const char *str});"},
	 	{ "trigger": "ungetc\tpxhoang-int ungetc", "contents": "ungetc(${1:int char}, ${2:FILE *stream});"},
	 	{ "trigger": "perror\tpxhoang-void perror", "contents": "perror(${1:const char *str});"},
	
	/**
	 * Stdlib.h
	 */
	 	{ "trigger": "atof\tpxhoang-double atof", "contents": "atof(${1:const char *str});"},
	 	{ "trigger": "atoi\tpxhoang-int atoi", "contents": "atoi(${1:const char *str});"},
	 	{ "trigger": "atol\tpxhoang-long int atol", "contents": "atol(${1:const char *str});"},
	 	{ "trigger": "strtod\tpxhoang-double strtod", "contents": "strtod(${1:const char *str}, ${2:char **endptr});"},
	 	{ "trigger": "strtol\tpxhoang-long int strtol", "contents": "strtol(${1:const char *str}, ${2:char **endptr}, ${3:int base});"},
	 	{ "trigger": "strtoul\tpxhoang-unsigned long int strtoul", "contents": "strtoul(${1:const char *str}, ${2:char **endptr}, ${3:int base});"},
	 	{ "trigger": "calloc\tpxhoang-void *calloc", "contents": "calloc(${1:size_t nitems}, ${2:size_t size});"},
	 	{ "trigger": "free\tpxhoang-void free", "contents": "free(${1:void *ptr});"},
	 	{ "trigger": "malloc\tpxhoang-void *malloc", "contents": "malloc(${1:size_t size});"},
	 	{ "trigger": "realloc\tpxhoang-void *realloc", "contents": "realloc(${1:void *ptr}, ${2:size_t size});"},
	 	{ "trigger": "abort\tpxhoang-void abort", "contents": "abort(${1:void});"},
	 	{ "trigger": "atexit\tpxhoang-int atexit", "contents": "atexit(${1:void (*func)(void)});"},
	 	{ "trigger": "exit\tpxhoang-void exit", "contents": "exit(${1:int status});"},
	 	{ "trigger": "getenv\tpxhoang-char *getenv", "contents": "getenv(${1:const char *name});"},
	 	{ "trigger": "system\tpxhoang-int system", "contents": "system(${1:const char *command});"},
	 	{ "trigger": "bsearch\tpxhoang-void *bsearch", "contents": "bsearch(${1:const void *key}, ${2:const void *base}, ${3:size_t nitems}, ${4:size_t size}, ${5:int (*compar)(const void *, const void *)});"},
	 	{ "trigger": "qsort\tpxhoang-void qsort", "contents": "qsort(${1:void *base}, ${2:size_t nitems}, ${3:size_t size}, ${4:int (*compar)(const void *, const void*)});"},
	 	{ "trigger": "abs\tpxhoang-int abs", "contents": "abs(${1:int x});"},
	 	{ "trigger": "div\tpxhoang-div_t div", "contents": "div(${1:int numer}, ${2:int denom});"},
	 	{ "trigger": "labs\tpxhoang-long int labs", "contents": "labs(${1:long int x});"},
	 	{ "trigger": "ldiv\tpxhoang-ldiv_t ldiv", "contents": "ldiv(${1:long int numer}, ${2:long int denom});"},
	 	{ "trigger": "rand\tpxhoang-int rand", "contents": "rand(${1:void});"},
	 	{ "trigger": "srand\tpxhoang-void srand", "contents": "srand(${1:unsigned int seed});"},
	 	{ "trigger": "mblen\tpxhoang-int mblen", "contents": "mblen(${1:const char *str}, ${2:size_t n});"},
	 	{ "trigger": "mbstowcs\tpxhoang-size_t mbstowcs", "contents": "mbstowcs(${1:schar_t *pwcs}, ${2:const char *str}, ${3:size_t n});"},
	 	{ "trigger": "mbtowc\tpxhoang-int mbtowc", "contents": "mbtowc(${1:whcar_t *pwc}, ${2:const char *str}, ${3:size_t n});"},
	 	{ "trigger": "wcstombs\tpxhoang-size_t wcstomb", "contents": "wcstombs(${1:char *str}, ${2:const wchar_t *pwcs}, ${3:size_t n});"},
	 	{ "trigger": "wctomb\tpxhoang-int wctomb(", "contents": "wctomb(${1:char *str}, ${2:wchar_t wchar});"},
	
	/**
	 * String.h
	 */
	 	{ "trigger": "memchr\tpxhoang-void *memchr", "contents": "memchr(${1:const void *str}, ${2:int c}, ${3:size_t n});"},
	 	{ "trigger": "memcmp\tpxhoang-int memcmp", "contents": "memcmp(${1:const void *str1}, ${2:const void *str2}, ${3:size_t n});"},
	 	{ "trigger": "memcpy\tpxhoang-void *memcpy(void *dest, const void *src, size_t n)", "contents": "memcpy(${1:void *str1}, ${2:const void *str2}, ${3:size_t n});"},
	 	{ "trigger": "memmove\tpxhoang-void *memmove", "contents": "memmove(${1:void *str1}, ${2:const void *str2}, ${3:size_t n});"},
	 	{ "trigger": "memset\tpxhoang-void *memset", "contents": "memset(${1:void *str}, ${2:int c}, ${3:size_t n});"},
	 	{ "trigger": "strcat\tpxhoang-char *strcat", "contents": "strcat(${1:char *dest}, ${2:const char *src});"},
	 	{ "trigger": "strncat\tpxhoang-char *strncat", "contents": "strncat(${1:char *dest}, ${2:const char *src}, ${3:size_t n});"},
	 	{ "trigger": "strchr\tpxhoang-char *strchr", "contents": "strchr(${1:const char *str}, ${2:int c});"},
	 	{ "trigger": "strcmp\tpxhoang-int strcmp", "contents": "strcmp(${1:const char *str1}, ${2:const char *str2});"},
	 	{ "trigger": "strncmp\tpxhoang-int strncmp", "contents": "strncmp(${1:const char *str1}, ${2:const char *str2}, ${3:size_t n});"},
	 	{ "trigger": "strcoll\tpxhoang-int strcoll", "contents": "strcoll(${1:const char *str1},  ${2:const char *str2});"},
	 	{ "trigger": "strcpy\tpxhoang-char *strcpy", "contents": "strcpy(${1:char *dest}, ${2:const char *src});"},
	 	{ "trigger": "strncpy\tpxhoang-char *strncpy", "contents": "strncpy(${1:char *dest}, ${2:const char *src}, ${3:size_t n});"},
	 	{ "trigger": "strcspn\tpxhoang-size_t strcspn", "contents": "strcspn(${1:const char *str1}, ${2:const char *str2});"},
	 	{ "trigger": "strerror\tpxhoang-char *strerror", "contents": "strerror(${1:int errnum});"},
	 	{ "trigger": "strlen\tpxhoang-size_t strlen", "contents": "strlen(${1:const char *str});"},
	 	{ "trigger": "strpbrk\tpxhoang-char *strpbrk", "contents": "strpbrk(${1:const char *str1}, ${2:const char *str2});"},
	 	{ "trigger": "strrchr\tpxhoang-char *strrchr", "contents": "strrchr(${1:const char *str}, ${2:int c});"},
	 	{ "trigger": "strspn\tpxhoang-size_t strspn", "contents": "strspn(${1:const char *str1}, ${2:const char *str2});"},
	 	{ "trigger": "strstr\tpxhoang-char *strstr", "contents": "strstr(${1:const char *haystack}, ${2:const char *needle});"},
	 	{ "trigger": "strtok\tpxhoang-char *strtok", "contents": "strtok(${1:char *str}, ${2:const char *delim});"},
	 	{ "trigger": "strxfrm\tpxhoang-size_t strxfrm", "contents": "strxfrm(${1:char *dest}, ${2:const char *src}, ${3:size_t n});"},


	 /**
	  * unistd.h
	  */
		{ "trigger": "access\tpxhoang-int access", "contents": "access(${1:const char *path}, ${2:int amode});"},
		{ "trigger": "alarm\tpxhoang-unsigned int alarm", "contents": "alarm(${1:unsigned int seconds});"},
		{ "trigger": "brk\tpxhoang-int brk", "contents": "brk(${1:void *addr});"},
		{ "trigger": "chdir\tpxhoang-int chdir", "contents": "chdir(${1:const char *path});"},
		{ "trigger": "chroot\tpxhoang-int chroot", "contents": "chroot(${1:const char *path});"},
		{ "trigger": "chown\tpxhoang-int chown", "contents": "chown(${1:const char *path}, ${2:uid_t owner}, ${3:gid_t group});"},
		{ "trigger": "close\tpxhoang-int close", "contents": "close(${1:int fildes});"},
		{ "trigger": "confstr\tpxhoang-size_t confstr", "contents": "confstr(${1:int name}, ${2:char *buf}, ${3:size_t len});"},
		{ "trigger": "crypt\tpxhoang-char *crypt", "contents": "crypt(${1:const char *key}, ${2:const char *salt});"},
		{ "trigger": "ctermid\tpxhoang-char *ctermid", "contents": "ctermid(${1:char *s});"},
		{ "trigger": "cuserid\tpxhoang-char *cuserid", "contents": "cuserid(${1:char *s});"},
		{ "trigger": "dup\tpxhoang-int dup", "contents": "dup(${1:int fildes});"},
		{ "trigger": "dup2\tpxhoang-int dup2", "contents": "dup2(${1:int fildes}, ${2:int fildes2});"},
		{ "trigger": "encrypt\tpxhoang-void encrypt", "contents": "encrypt(${1:char block[64]}, ${2:int edflag});"},
		{ "trigger": "execl\tpxhoang-int execl", "contents": "execl(${1:const char *path}, ${2:const char *arg0}, ${3:...});"},
		{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
		{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
		{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
		{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
		{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
		{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
		{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
		{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},














	/**
	 * ctype.h
	 */
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalpha\tpxhoang-isalpha", "contents": "isalpha(${1:int c});"},
	 	{ "trigger": "iscntrl\tpxhoang-iscntrl", "contents": "iscntrl(${1:int c});"},
	 	{ "trigger": "isdigit\tpxhoang-isdigit", "contents": "isdigit(${1:int c});"},
	 	{ "trigger": "isgraph\tpxhoang-isgraph", "contents": "isgraph(${1:int c});"},
	 	{ "trigger": "islower\tpxhoang-islower", "contents": "islower(${1:int c});"},
	 	{ "trigger": "isprint\tpxhoang-isprint", "contents": "isprint(${1:int c});"},
	 	{ "trigger": "ispunct\tpxhoang-ispunct", "contents": "ispunct(${1:int c});"},
	 	{ "trigger": "isspace\tpxhoang-isspace", "contents": "isspace(${1:int c});"},
	 	{ "trigger": "isupper\tpxhoang-isupper", "contents": "isupper(${1:int c});"},
	 	{ "trigger": "isxdigit\tpxhoang-isxdigit", "contents": "isxdigit(${1:int c});"},
	 	{ "trigger": "tolower\tpxhoang-tolower", "contents": "tolower(${1:int c});"},
	 	{ "trigger": "toupper\tpxhoang-toupper", "contents": "toupper(${1:int c});"},



	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},
	 	{ "trigger": "isalnum\tpxhoang-isalnum", "contents": "isalnum(${1:int c});"},


	/**
	* General types
	*/
		// General types
		{ "trigger": "int\tpxhoang-type-general", "contents": "int"},
		{ "trigger": "double\tpxhoang-type-general", "contents": "double"},
		{ "trigger": "float\tpxhoang-type-general", "contents": "float"},
		{ "trigger": "char\tpxhoang-type-general", "contents": "char"},
		{ "trigger": "void\tpxhoang-type-general", "contents": "void"},
		{ "trigger": "unsigned\tpxhoang-type-general", "contents": "unsigned"},
		{ "trigger": "signed\tpxhoang-type-general", "contents": "signed"},
		{ "trigger": "long\tpxhoang-type-general", "contents": "long"},
		{ "trigger": "short\tpxhoang-type-general", "contents": "short"},

		// Size types
		{ "trigger": "int8_t\tpxhoang-type-general", "contents": "int8_t"},
		{ "trigger": "uint8_t\tpxhoang-type-general", "contents": "uint8_t"},
		{ "trigger": "int16_t\tpxhoang-type-general", "contents": "int16_t"},
		{ "trigger": "uint16_t\tpxhoang-type-general", "contents": "uint16_t"},
		{ "trigger": "int32_t\tpxhoang-type-general", "contents": "int32_t"},
		{ "trigger": "uint32_t\tpxhoang-type-general", "contents": "uint32_t"},
		{ "trigger": "int64_t\tpxhoang-type-general", "contents": "int64_t"},
		{ "trigger": "uint64_t\tpxhoang-type-general", "contents": "uint64_t"},
		{ "trigger": "short\tpxhoang-type-general", "contents": "short"},


		// Struct types
		{ "trigger": "sockaddr_in\tpxhoang-type-struct", "contents": "sockaddr_in"},

	/**
	 * Structs
	 */
		{ "trigger": "struct-sockaddr_in\tpxhoang-struct", "contents": "struct sockaddr_in{\n\tshort sin_family;\n\tu_short sin_port;\n\tstruct in_addr sin_addr;\n\tchar sin_zero[8];\n}"}





	]// End completions
}


